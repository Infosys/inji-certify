GetCredentialSunBirdC:
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_invalid_format:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_01      
      description: Get sunbird VC when invalid format is given      
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdC/GetCredentialSunBirdC/GetCredentialSunBirdC
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_access_token$",
        "format": "abcdef",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
      "error": "unsupported_credential_format"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_without_format:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_02      
      description: Get sunbird VC when format is removed from request body      
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdC/GetCredentialSunBirdC/GetCredentialSunBirdC
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_access_token$",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
      "error": "invalid_vc_format"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_unsupported_format_value:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_03      
      description: Get sunbird VC when format value is given random value     
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdC/GetCredentialSunBirdC/GetCredentialSunBirdC
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_access_token$",
        "format": "jwt_vc_json",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
      "error": "not_implemented"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_multiple_format_value:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_04      
      description: Get sunbird VC when multiple values given as format    
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdC/GetCredentialSunBirdC/GetCredentialSunBirdC
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_access_token$",
        "format": "ldp_vc, jwt_vc_json-ld",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
      "error": "unsupported_credential_format"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_onlyone_credentialtype_1:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_05      
      description: Get sunbird VC when only one type is given for credential type     
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdC/GetCredentialSunBirdC/GetCredentialSunBirdC
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
      "error": "unsupported_credential_type"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_onlyone_credentialtype_2:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_06     
      description: Get sunbird VC when only one type is given for credential type     
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdC/GetCredentialSunBirdC/GetCredentialSunBirdC
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
      "error": "unsupported_credential_type"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_random_credentialtype:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_07      
      description: Get sunbird VC when random value is given for credential type     
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdC/GetCredentialSunBirdC/GetCredentialSunBirdC
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "abcdefghij"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
      "error": "unsupported_credential_type"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_without_proof:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_08      
      description: Get sunbird VC without proof in request body     
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdC/GetCredentialSunBirdC/GetCredentialSunBirdC
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}]
}'
      output: '{
      "error": "unsupported_proof_type"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_only_prooftype:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_09     
      description: Get sunbird VC when only proof type is given in request body     
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdC/GetCredentialSunBirdC/GetCredentialSunBirdC
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt"
}'
      output: '{
      "error": "invalid_proof"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_emptyvalue_prooftype:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_10     
      description: Get sunbird VC when proof type value is empty     
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdC/GetCredentialSunBirdC/GetCredentialSunBirdC
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
      "error": "unsupported_proof_type"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_onlySpaces_prooftype:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_11    
      description: Get sunbird VC when proof type value is with only spaces     
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdC/GetCredentialSunBirdC/GetCredentialSunBirdC
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "   ",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
      "error": "unsupported_proof_type"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_invalid_proofjwtvalue:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_12    
      description: Get sunbird VC when invalid proof jwt value is given     
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdC/GetCredentialSunBirdC/GetCredentialSunBirdC
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
        "proof_type": "jwt",
        "jwt": ""
}'
      output: '{
      "error": "invalid_proof"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_emptyvalue_format:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_13      
      description: Get sunbird VC when format value is given empty      
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdC/GetCredentialSunBirdC/GetCredentialSunBirdC
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_access_token$",
        "format": "",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
      "error": "invalid_vc_format"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_only_proofjwtvalue:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_14    
      description: Get sunbird VC when only proofjwt value is given in request     
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdC/GetCredentialSunBirdC/GetCredentialSunBirdC
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
      "error": "unsupported_proof_type"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_spaces_proofjwtvalue:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_15      
      description: Get sunbird VC when only spaces given for proofjwt value      
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdC/GetCredentialSunBirdC/GetCredentialSunBirdC
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_access_token$",
        "format": "abcdef",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "  "
}'
      output: '{
      "error": "invalid_proof"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_invalid_jwtvalue:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_16      
      description: Get sunbird VC when invalid value is given for jwt      
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdC/GetCredentialSunBirdC/GetCredentialSunBirdC
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_access_token$",
        "format": "abcdef",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "PROOF_cwt"
}'
      output: '{
      "error": "invalid_proof"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_invalid_prooftype:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_18      
      description: Get sunbird VC when invalid prooftype value is given      
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdC/GetCredentialSunBirdC/GetCredentialSunBirdC
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_access_token$",
        "format": "abcdef",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt123",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
      "error": "unsupported_proof_type"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_unsupported_prooftype:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_17      
      description: Get sunbird VC when unsupported prooftype value is given      
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdC/GetCredentialSunBirdC/GetCredentialSunBirdC
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_access_token$",
        "format": "abcdef",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "cwt",
        "proof_cwt": "$PROOF_CWT_2$"
}'
      output: '{
      "error": "unsupported_proof_type"
}'